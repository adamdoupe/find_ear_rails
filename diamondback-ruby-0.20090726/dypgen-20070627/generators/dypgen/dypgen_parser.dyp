{
open Printf
open Parse_tree

let () = dypgen_verbose := 0

let empty_ppi = {
  token_list = [];
  relation = [];
  start = [];
  generic_merge = [];
  cons = [];
  additional_cons = [];
  nt_type = [];
  single_nt = [] }
}

%token LPAREN RPAREN COMMA SEMI COLON PERCENTPERCENT LBRACE RBRACE BAR LESS GREATER EQUAL KWD_TOKEN KWD_START KWD_RELATION KWD_MLI KWD_MERGE KWD_CONSTRUCTOR KWD_FOR KWD_TYPE KWD_NON_TERMINAL <string * (int * int)> OCAML_CODE <string> OCAML_TYPE <string * (int * int)> PATTERN <string * (int * int * int)> UIDENT <string * (int * int * int)> LIDENT EOF

%start <Parse_tree.obj> main

%%

main: | optional_code parser_param_infos PERCENTPERCENT grammar optional_trailer optional_mli EOF
  { ($1,$2,List.rev $4,$5,$6) }

optional_trailer:
  |                           { ("",(0,0)) }
  | PERCENTPERCENT OCAML_CODE { $2 }

parser_param_info:
  | KWD_START OCAML_TYPE LIDENT  { {empty_ppi with start = [((fst $3),$2)]} }
  | token_list                   { {empty_ppi with token_list = $1} }
  | relation                     { {empty_ppi with relation = $1} }
  | KWD_CONSTRUCTOR UIDENT KWD_FOR lident_list
      { { empty_ppi with cons = [(fst $2,List.rev $4)] }  }
  | KWD_CONSTRUCTOR uident_list
      { { empty_ppi with additional_cons = List.rev $2 }  }
  | KWD_MERGE LIDENT lident_list
      { {empty_ppi with generic_merge = [((fst $2),List.rev $3)]} }
  | KWD_TYPE OCAML_TYPE lident_list
      { {empty_ppi with nt_type = [$2,List.rev $3]} }
  | KWD_NON_TERMINAL lident_list
      { {empty_ppi with single_nt = List.rev $2} }

parser_param_infos:
  | parser_param_info { $1 }
  | parser_param_infos parser_param_info
    %full {
      { token_list = ($2.token_list@$1.token_list);
        relation = $2.relation@$1.relation;
        start = $2.start@$1.start;
        generic_merge = $2.generic_merge@$1.generic_merge;
        cons = $2.cons@$1.cons;
        additional_cons = $2.additional_cons@$1.additional_cons;
        nt_type = $2.nt_type@$1.nt_type;
        single_nt = $2.single_nt@$1.single_nt },
        false,$data }

lident_list:
  | LIDENT             { [(fst $1)] }
  | lident_list LIDENT { (fst $2)::$1 }

uident_list:
  | UIDENT             { [(fst $1)] }
  | uident_list UIDENT { (fst $2)::$1 }

optional_code:
  |            { ("",(0,0)) }
  | OCAML_CODE { $1 }

optional_mli:
  |                    { ("",(0,0)) }
  | KWD_MLI OCAML_CODE { $2 }

token_list:
  | KWD_TOKEN UIDENT             { [((fst $2),"No_type")] }
  | KWD_TOKEN OCAML_TYPE UIDENT  { [((fst $3),$2)] }
  | token_list UIDENT            { ((fst $2),"No_type")::$1 }
  | token_list OCAML_TYPE UIDENT { ((fst $3),$2)::$1 }

relation:
  | KWD_RELATION { [] }
  | relation relation_list { (Rel_list (List.rev $2))::$1 }
  | relation LIDENT { (Rel_single (fst $2))::$1 }

relation_list:
  | LIDENT LESS LIDENT { [(fst $3);(fst $1)] }
  | relation_list LESS LIDENT { (fst $3)::$1 }

grammar:
  | grammar entry_def  { $2@$1 }
  | entry_def  { $1 }

entry_def:
  LIDENT COLON opt_bar rhs_list
  { let f (rl1,rl2) (prio,litl,pa_l,code,add_rules) =
      (fst $1,prio,litl,pa_l,code)::rl1,add_rules@rl2
    in
    let rl1,rl2 = List.fold_left f ([],[]) (List.rev $4) in
    rl2@rl1 }

rhs_list:
  | rhs { [$1] }
  | rhs_list BAR rhs { $3::$1 }

rhs:
  | literal_list OCAML_CODE priority
      { let litl,_,part_act_l,additional_rules = $1 in
        ($3,List.rev litl, part_act_l, $2, additional_rules) }

opt_bar:
  |     { () }
  | BAR { () }

literal_list:
  |        { ([],0,[],[]) }
  | literal_list opt_par_act literal opt_pattern
      { let l,len,part_act_l,add_rule1 = $1 in
        if len=0 && $2<>(("",(0,0)),[("_","_",(0,0))])
        then raise Giveup else
        let part_act_l =
          let pa,patl = $2 in
          if pa=("",(0,0)) then part_act_l
          else ((pa,len),patl)::part_act_l
        in
        let lit,add_rule2 = $3 in
        let pat_typ = match lit with
          | Obj_terminal s -> fst s
          | Obj_non_terminal (s,_,_,_) -> s
        in
        ( ((lit,([fst $4,pat_typ,snd $4]:((string*string*(int*int)) list)))::l), (len+1),
          part_act_l, add_rule2@add_rule1 ) }

literal:
  | UIDENT { (Obj_terminal $1),[] }
  | nested {
      (Obj_non_terminal ((fst (fst $1)),
        ("No_priority",(-1,-1,-1)),Pr_eq,1)),
      (snd $1) }
  | LIDENT LPAREN EQUAL LIDENT RPAREN
      { (Obj_non_terminal ((fst $1),$4,Pr_eq,1)),[] }
  | LIDENT LPAREN LESS EQUAL LIDENT RPAREN
      { (Obj_non_terminal ((fst $1),$5,Pr_lesseq,1)),[] }
  | LIDENT LPAREN LESS LIDENT RPAREN
      { (Obj_non_terminal ((fst $1),$4,Pr_less,1)),[] }
  | LIDENT LPAREN GREATER EQUAL LIDENT RPAREN
      { (Obj_non_terminal ((fst $1),$5,Pr_greatereq,1)),[] }
  | LIDENT LPAREN GREATER LIDENT RPAREN
      { (Obj_non_terminal ((fst $1),$4,Pr_greater,1)),[] }


nested:
  | LIDENT { ($1,[]) }
  | LPAREN rhs_list RPAREN  %full
    { let nt = "dypgen__nested_nt_"^(string_of_int $data) in
      let f (rl1,rl2) (prio,litl,pa_l,code,add_rules) =
        (nt,prio,litl,pa_l,code)::rl1,add_rules@rl2
      in
      let rl1,rl2 = List.fold_left f ([],[]) (List.rev $2) in
      ((nt,(0,0,0)),rl2@rl1),true,($data+1) }

priority:
  |        { ("default_priority",(-1,-1,-1)) }
  | LIDENT { $1 }


opt_par_act:
  |                        { (("",(0,0)),["_","_",(0,0)]) }
  | OCAML_CODE opt_pattern { ($1,[fst $2,"_",snd $2]) }

opt_pattern:
  |         { ("_",(0,0)) }
  | PATTERN { (fst $1,snd $1) }