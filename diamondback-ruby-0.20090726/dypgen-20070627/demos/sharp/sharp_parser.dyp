{
open Dyp_symbols
open Dyp_priority_data
open Dyp

let () = dypgen_verbose := 1

let r_sharp = (expr, [
  Non_ter (expr,No_priority);
  Ter t_Sharp;
  Non_ter (expr,No_priority)
  ],default_priority)
(* E -> E # E *)

let action_plus = (fun dyp l ->
  let x1,x2 = match l with
    | [Obj_expr x1;_;Obj_expr x2] -> x1,x2
    | _ -> failwith "action_plus"
  in
  dyp.will_shift <- false;
  (Obj_expr (x1+x2))
)

let action_time = (fun dyp l ->
  let x1,x2 = match l with
    | [Obj_expr x1;_;Obj_expr x2] -> x1,x2
    | _ -> failwith "action_plus"
  in
  dyp.will_shift <- false;
  (Obj_expr (x1*x2))
)
}

%token <int> Int Plus Time Sharp And_token Lpar Rpar Eof_token


%start <int> main

%%

main : expr Eof_token { $1 }

expr :
  | Int            { $1 }
  | Lpar expr Rpar { $2 }
  | And_token Plus { dyp.add_rules <- [(r_sharp, action_plus)] } expr { $4 }
  | And_token Time { dyp.add_rules <- [(r_sharp, action_time)] } expr { $4 }
